{"version":3,"sources":["test/review-test.ts"],"names":[],"mappings":";;AAAA,6BAA2B;AAC3B,8CAA+C;AAC/C,QAAQ,CAAC,2BAA2B,EAAE;IAClC,EAAE,CAAC,iIACyC,EAAE;QAC1C,aAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;QAC7D,aAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;IACnE,CAAC,CAAC,CAAA;IACF,EAAE,CAAC,sHAC8C,EAAE;QAC/C,aAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;QAClE,aAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;QACnE;;yFAEiF;IACrF,CAAC,CAAC,CAAA;IACF,EAAE,CAAC,yDAAyD,EAAE;QAC1D,aAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;IACvF,CAAC,CAAC,CAAA;IACF,EAAE,CAAC,sDAAsD,EAAE;QACvD,aAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;IACxF,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA;AACF,QAAQ,CAAC,yBAAyB,EAAE;IAChC,EAAE,CAAC,qDAAqD,EAAE;QACtD,aAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;IAChG,CAAC,CAAC,CAAA;IACF,EAAE,CAAC,iEAAiE,EAAE;QAClE,aAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,EAAE,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;IACtF,CAAC,CAAC,CAAA;IACF,EAAE,CAAC,mFAAmF,EAAE;QACpF,IAAM,gBAAgB,GAAG,EAAE,CAAA;QAC3B,IAAM,mBAAmB,GAAG,gBAAgB,GAAG,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;QACjE,aAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAA;IACvG,CAAC,CAAC,CAAA;IACF,EAAE,CAAC,2DAA2D,EAAE;QAC5D,IAAM,gBAAgB,GAAG,EAAE,CAAA;QAC3B,IAAM,mBAAmB,GAAG,gBAAgB,GAAG,EAAE,GAAG,CAAE,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;QACtE,IAAM,EAAE,GAAG,KAAK,CAAC,aAAa,CAAC,gBAAgB,EAAE,KAAK,CAAC,cAAc,CAAC,CAAA;QAEtE,aAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAA;IAC/F,CAAC,CAAC,CAAA;IACF,EAAE,CAAC,oFAAoF,EAAE;QACrF,IAAM,gBAAgB,GAAG,EAAE,CAAA;QAC3B,IAAM,WAAW,GAAG,EAAE,CAAA;QACtB,IAAM,4BAA4B,GAAG,EAAE,GAAG,EAAE,CAAA;QAE5C,IAAM,WAAW,GAAG,gBAAgB,GAAG,GAAG,CAAA;QAC1C,IAAM,wBAAwB,GAAG,KAAK,CAAC,uBAAuB,CAC1D,gBAAgB,EAChB,WAAW,EACX,4BAA4B,CAC/B,CAAA;QACD,aAAM,CAAC,wBAAwB,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAA;IAChE,CAAC,CAAC,CAAA;AACN,CAAC,CAAC,CAAA","file":"review-test.js","sourcesContent":["import {expect} from 'chai'\r\nimport * as curve from '../app/forgettingCurve'\r\ndescribe('measuringPreviousStrength', () => {\r\n    it(`should return estimated previous strength if proficiency >= PROFICIENCIES.FOUR\r\n    and time since last review was really short`, () => {\r\n        expect(curve.measurePreviousStrength(40, 99, 2)).to.equal(40)\r\n        expect(curve.measurePreviousStrength(40, 99.9, 2)).to.equal(40)\r\n    })\r\n    it(`should return estimated previous strength if proficiency <= 1'\r\n        ' and time since last review was really long`, () => {\r\n        expect(curve.measurePreviousStrength(40, 1, 9999999)).to.equal(40)\r\n        expect(curve.measurePreviousStrength(40, .1, 9999999)).to.equal(40)\r\n        /* if you were to plug in 1% in our formula for 9999999 seconds\r\n         you would normally get 63 dB,\r\n          which doesn't make sense given the previous estimated decibel strength of 40 */\r\n    })\r\n    it('should return 10 dbE for 1/e proficiency and 10 seconds', () => {\r\n        expect(curve.measurePreviousStrength(39, 100 * 1 / curve.e, 10)).to.closeTo(10, .1)\r\n    })\r\n    it('should return 50 dbE for 75% proficiency and 8 hours', () => {\r\n        expect(curve.measurePreviousStrength(39, 100 * .75, 8 * 60 * 60)).to.closeTo(50, .1)\r\n    })\r\n})\r\ndescribe('estimateCurrentStrength', () => {\r\n    it('should return previous strength for 1/e proficiency', () => {\r\n        expect(curve.estimateCurrentStrength(39, 100 * 1 / curve.e, 8 * 60 * 60)).to.closeTo(39, .1)\r\n    })\r\n    it('should return previous strength for 0 seconds since last review', () => {\r\n        expect(curve.estimateCurrentStrength(39, 100 * 1 / curve.e, 0)).to.closeTo(39, .1)\r\n    })\r\n    it('should return + 10(e-1) dB for 100% proficiency and longgg time since last review', () => {\r\n        const originalStrength = 39\r\n        const newExpectedStrength = originalStrength + 10 * (curve.e - 1)\r\n        expect(curve.estimateCurrentStrength(39, 99.99999, 9999999999)).to.closeTo(newExpectedStrength, .1)\r\n    })\r\n    it('should return + 10(1 - 1/e) dB for 100% proficiency at Tc', () => {\r\n        const originalStrength = 39\r\n        const newExpectedStrength = originalStrength + 10 * ( 1 - 1 / curve.e)\r\n        const Tc = curve.calculateTime(originalStrength, curve.criticalRecall)\r\n\r\n        expect(curve.estimateCurrentStrength(39, 99.99999, Tc)).to.closeTo(newExpectedStrength, .1)\r\n    })\r\n    it('should return + 4.4dB for 99% proficiency at 40 minutes past a 39 strength memory ', () => {\r\n        const originalStrength = 39\r\n        const proficiency = 99\r\n        const timeSincePreviousInteraction = 40 * 60\r\n\r\n        const newStrength = originalStrength + 4.4\r\n        const estimatedCurrentStrength = curve.estimateCurrentStrength(\r\n            originalStrength,\r\n            proficiency,\r\n            timeSincePreviousInteraction\r\n        )\r\n        expect(estimatedCurrentStrength).to.closeTo(newStrength, .1)\r\n    })\r\n})\r\n"]}