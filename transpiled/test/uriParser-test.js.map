{"version":3,"sources":["test/uriParser-test.ts"],"names":[],"mappings":"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","file":"uriParser-test.js","sourcesContent":["import {convertBreadcrumbListToString, getLastNBreadcrumbsStringFromList} from '../app/objects/contentItem/uriParser';\r\nimport {expect} from 'chai'\r\ndescribe('Convert Breadcrumbs List to String', () => {\r\n    let list\r\n    let expectedBreadcrumbs\r\n    list = ['a', 'b', 'c']\r\n    expectedBreadcrumbs = 'a > b > c'\r\n    it('should convert ' + list.toString() + ' to ' + expectedBreadcrumbs, () => {\r\n        const breadcrumbs = convertBreadcrumbListToString(list)\r\n        expect(breadcrumbs).to.equal(expectedBreadcrumbs)\r\n    })\r\n\r\n    list = ['Everything', 'Spanish', 'Vocab', 'amar : to love']\r\n    expectedBreadcrumbs = 'Everything > Spanish > Vocab > amar : to love'\r\n    it('should convert ' + list.toString() + ' to ' + expectedBreadcrumbs, () => {\r\n        const breadcrumbs = convertBreadcrumbListToString(list)\r\n        expect(breadcrumbs).to.equal(expectedBreadcrumbs)\r\n    })\r\n\r\n    list = []\r\n    expectedBreadcrumbs = ''\r\n    it('should convert ' + list.toString() + ' to ' + expectedBreadcrumbs, () => {\r\n        const breadcrumbs = convertBreadcrumbListToString(list)\r\n        expect(breadcrumbs).to.equal(expectedBreadcrumbs)\r\n    })\r\n})\r\ndescribe('Last N BreadCrumbs String From List', () => {\r\n    let list, expectedBreadcrumbs, n\r\n    list = ['a', 'b' , 'c']\r\n    expectedBreadcrumbs = 'b > c'\r\n    n = 2\r\n    it('should convert ' + list.toString() + ', ' + n + ' to ' + expectedBreadcrumbs, () => {\r\n        const breadcrumbs = getLastNBreadcrumbsStringFromList(list, n)\r\n        expect(breadcrumbs).to.equal(expectedBreadcrumbs)\r\n    })\r\n    list = ['a', 'b', 'c']\r\n    expectedBreadcrumbs = 'a > b > c'\r\n    n = 4\r\n    it('should convert ' + list.toString() + ', ' + n + ' to ' + expectedBreadcrumbs, () => {\r\n        const breadcrumbs = getLastNBreadcrumbsStringFromList(list, n)\r\n        expect(breadcrumbs).to.equal(expectedBreadcrumbs)\r\n    })\r\n\r\n    list = ['a', 'b', 'c']\r\n    expectedBreadcrumbs = 'c'\r\n    n = 1\r\n    it('should convert ' + list.toString() + ', ' + n + ' to ' + expectedBreadcrumbs, () => {\r\n        const breadcrumbs = getLastNBreadcrumbsStringFromList(list, n)\r\n        expect(breadcrumbs).to.equal(expectedBreadcrumbs)\r\n    })\r\n\r\n    list = ['a', 'b', 'c']\r\n    expectedBreadcrumbs = ''\r\n    n =  0\r\n    it('should convert ' + list.toString() + ', ' + n + ' to ' + expectedBreadcrumbs, () => {\r\n        const breadcrumbs = getLastNBreadcrumbsStringFromList(list, n)\r\n        expect(breadcrumbs).to.equal(expectedBreadcrumbs)\r\n    })\r\n\r\n\r\n    list = ['Everything', 'Spanish', 'Vocab', 'amar : to love']\r\n    expectedBreadcrumbs = 'Everything > Spanish > Vocab > amar : to love'\r\n    n =  4\r\n    it('should convert ' + list.toString() + ' to ' + expectedBreadcrumbs, () => {\r\n        const breadcrumbs = getLastNBreadcrumbsStringFromList(list, n)\r\n        expect(breadcrumbs).to.equal(expectedBreadcrumbs)\r\n    })\r\n\r\n    list = ['Everything', 'Spanish', 'Vocab', 'amar : to love']\r\n    expectedBreadcrumbs = 'Spanish > Vocab > amar : to love'\r\n    n =  3\r\n    it('should convert ' + list.toString() + ' to ' + expectedBreadcrumbs, () => {\r\n        const breadcrumbs = getLastNBreadcrumbsStringFromList(list, n)\r\n        expect(breadcrumbs).to.equal(expectedBreadcrumbs)\r\n    })\r\n\r\n    list = []\r\n    expectedBreadcrumbs = ''\r\n    it('should convert ' + list.toString() + ' to ' + expectedBreadcrumbs, () => {\r\n        const breadcrumbs = getLastNBreadcrumbsStringFromList(list, n)\r\n        expect(breadcrumbs).to.equal(expectedBreadcrumbs)\r\n    })\r\n})\r\n"]}