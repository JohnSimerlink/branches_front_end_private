computed: {
 points() {
  const points = this.$store.getters.points(userId)

knawledgeMap component should just render the map based on the id given to it.
	-given the id . . . we use a store getter to for example get the name of the map or some other property on the map
	-interestingly enough the knawledgeMap component won't even do any of the map rendering . . . just related text . . . and just triggering the INITIALIZE_SIGMA_INSTANCE mutation upon mount.
		- the component won't actually trigger any loads though. User mouse events (such as clicking on a map will though). 
[x] And/But we need some where where as soon as the current mapId is set to not null, that MapLoader.loadIfNotLoaded(mapId) gets called
	This should get called inside of SET_MAP_ID mutation
	SET_MAP_ID mutation should get called inside of INITIALIZE_SIGMA_INSTANCE
		the mapId it uses is the one it pulls from user.currentMapId || GLOBALS.GLOBAL_MAP_ID

the store mutation that

[]difference betwen just loading category nodes and loading map nodes and loading maps.

eventually we will need an ability to make maps private. but for now . . . don't worry about that . . .
	. . . we will need a specific map object, because every map needs a ROOT_TREE_ID, that will have a contentId of type Category and title of the content item whose type was CONTENT_TYPES.MAP in the parent map.
	so a map contentItem will still have an entry in contentItems with an id and title, and will be listed as the contentId on one or more treeIds
		but yes we also need a specific map object
		so the sigmaEventListener onClick for node will check the content type, and if the contentype is not map open up the tooltip . . . otherwise call the SET_MAP mutation

upon user creation (or a user action to create a new map)
	call mutations.CREATE_USER_MAP
	
CREATE USER MAP (userId)
	creates map id based on userId
	sets mapName = user.name
	CREATE_MAP_IN_DB
		STORE_MAP_INTO_STORE
	
STORE_MAP_INTO_STORE gets called in CREATE_USER_MAP
STORE_MAP_INTO_STORE also gets called by LOAD_MAP

LOAD_MAP (mapId)
	branchesMap = branchesMapLoader.loadMap(mapId) << make sure this is the BranchesMapLoaderAndAutoSaver
	STORE_MAP_INTO_STORE mapId branchesMap

CREATE_MAP_IN_DB_AND_AUTO_SAVE rootTreeId
	so this function creates the mapId based on the rootTreeId

so mutation CREATE_CONTENT is called
	if datatype is MAP
		call CREATE_MAP 

mutation CREATE MAP title
	it has to create mapId - it does this based off the map title, the timestamp, and a random number . . .actually not based off 
	it has to create the root tree's content item, which is going to be a category that has the same title as the title of the map on the previous map.
		we get the id for this from the regular CREATE_CONTENT mutation
	it has to create rootTreeId
		it does this from the CREATE_TREE 
			create tree gets the id using the createTreeId method - which gets its based on the parentTreeId and contentId. so as long as our contentId is unique (and not just based on the title . . . ) then our root_tree_id for this map should be unique
	after discussion with mo, we are now making contentId a completely random id
	it has to create the root tree (and tree location, with map property set to mapId)
	
on knawledgemap mount we call
	
so upon knawledgeMap mount we call SWITCH_TO_LAST_USED_MAP
	which will for now call SWITCH_TO_MAP (GLOBAL_MAP_ID)

SWITCH TO MAP mapId
	will call LOAD_MAP_AND_ROOT_SIGMA_NODE
	will call SET_MAP_ID mapId
 	call set_camera_to map.rootTreeId << // TODO: eventually set to whatever location the user was at in the map beforehand

LOAD_MAP_AND_ROOT_SIGMA_NODE mapId
	will call
	will call load MAP_IF_NOT_LOADED (mapId)
	gets map 
	will call FamilyLoader.load(map.rootTreeId)

SET_CAMERA_TO_ROOT_TREE_ID mapId
	gets map /// TODO: Whenever we get a map should we call loadMap if not loaded?
	calls SET_CAMERA_TO map.rootTreeId

SET_CAMERA_TO treeId
	gets treeLocationData from state.treeLocationData . . . // TODO: whenever we get treeLocationData should we first call loadTreeLocationIfNotLoaded?

TODO today: make new treelocations have a map id on them

TODO: add branchesMapStore and UserStore as substores under MutableGlobalSubscribableStore

TODO:
invite more people to web dev by going through people/mentors list
lunch mike cavoli
andre/mo text for sales meeting
acmw grace hopper
ibe banquet meeting
text ransika with details for cashvertising book . . . and/or RJ - if i want him to be in charge of the flyers
REMEMBER. Anything anyone else can do, anyone else MUST do. This is the rule I must follow if I want to scale past $14 every 6 months.
	
List the 9 Principles of MIT Media Lab
1) Emergence over authority
2) Pull over Push
3) Compasses over Maps
4) Risk over Safety
5) Disobedience over Compliance
6) Practice over Theory
7) Diversity over ability
8) Resilience over Strength
9) Systems over Objects