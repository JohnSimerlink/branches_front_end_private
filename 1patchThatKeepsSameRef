diff --git a/app/components/knawledgeMap/knawledgeMap.js b/app/components/knawledgeMap/knawledgeMap.js
index 54fcc90..ab11fb4 100644
--- a/app/components/knawledgeMap/knawledgeMap.js
+++ b/app/components/knawledgeMap/knawledgeMap.js
@@ -71,16 +71,23 @@ export async function removeTreeFromGraph(treeId){
 }
 
 function createTreeNodeFromTreeAndContent(tree, content, level){
-    console.log("create tree node from tere and content called")
-    const node = {
-        ...tree,
-        level,
-        content: content,
-        label: getLabelFromContent(content),
-        size: 1,
-        color: getTreeColor(content),
-        type: 'tree',
-    };
+    var node = tree
+    node.level = level
+    node.content = content
+    node.label = getLabelFromContent(content)
+    node.size = 1
+    node.color = getTreeColor(content)
+    node.type = 'tree'
+
+    // const node = {
+    //     ...tree,
+    //     level,
+    //     content: content,
+    //     label: getLabelFromContent(content),
+    //     size: 1,
+    //     color: getTreeColor(content),
+    //     type: 'tree',
+    // };
     return node;
 }
 
@@ -121,7 +128,8 @@ function createEdgeId(nodeOneId, nodeTwoId){
 export async function syncGraphWithNode(treeId){
     const tree = await Trees.get(treeId)
     const content = await ContentItems.get(tree.contentId)
-            //update the node
+
+    //update the node
     var sigmaNode = s.graph.nodes(treeId)
     sigmaNode.x = tree.x
     sigmaNode.y = tree.y
diff --git a/app/components/tree/tree.js b/app/components/tree/tree.js
index 93f4315..12cd2fe 100644
--- a/app/components/tree/tree.js
+++ b/app/components/tree/tree.js
@@ -18,9 +18,6 @@ export default {
 
         this.editing = false
         this.addingChild = false
-        // this.tree = {} // init to empty object until promises resolve, so vue does not complain
-        // this.fact = {}
-        // this.content = {}
         this.nodeBeingDragged = false
         this.tree = await Trees.get(this.id)
         this.content = await ContentItems.get(this.tree.contentId)
diff --git a/app/objects/tree.js b/app/objects/tree.js
index 1e0f653..5a86f22 100644
--- a/app/objects/tree.js
+++ b/app/objects/tree.js
@@ -223,7 +223,6 @@ export class Tree {
     }
     async calculateProficiencyAggregationForNotLeaf(){
         let proficiencyStats = {...blankProficiencyStats}
-        console.log(this.id,this,'NOT LEAF!: proficiency stats right before addObjToProficiencyStats is', JSON.stringify(proficiencyStats), JSON.stringify(blankProficiencyStats),this)
         if (!this.children || !Object.keys(this.children).length) return proficiencyStats
         const children = await Promise.all(
             Object.keys(this.children)
@@ -232,15 +231,11 @@ export class Tree {
         )
 
         children.forEach(child => {
-            console.log(this.id,'NOT LEAF! child is ', child.id, ', child proficiencyStats are', JSON.stringify(child.proficiencyStats))
-            console.log(this.id,'NOT LEAF! child is ', child.id, ', proficiency stats right before addObjToProficiencyStats is',JSON.stringify( proficiencyStats))
             proficiencyStats = addObjToProficiencyStats(proficiencyStats, child.proficiencyStats)
-            console.log(this.id,'NOT LEAF! child is ', child.id, ', proficiency stats right after addObjToProficiencyStats is', JSON.stringify(proficiencyStats))
         })
         return proficiencyStats
     }
     async recalculateProficiencyAggregation(){
-        console.log(this.id, "recalculateProficiencyAggregation called")
         let proficiencyStats;
         const isLeaf = await this.isLeaf()
         if (isLeaf){
@@ -249,70 +244,11 @@ export class Tree {
             proficiencyStats = await this.calculateProficiencyAggregationForNotLeaf()
         }
         this.setProficiencyStats(proficiencyStats)
-        console.log(this.id, "stats are", proficiencyStats)
 
         if (!this.parentId) return
         const parent = await Trees.get(this.parentId)
         return parent.recalculateProficiencyAggregation()
     }
-    //
-    // async recalculateProficiencyAggregation(){
-    //     console.log(this.id,'recalculateProficiencyAggregation called for', this)
-    //     const me = this
-    //     let proficiencyStats = blankProficiencyStats
-    //     const contentItem = await ContentItems.get(this.contentId)
-    //     console.log(me.id, 'ContentItems.get called for', this, ' result is', contentItem)
-    //
-    //     if (contentItem.hasIndividualProficiency()){
-    //         console.log(me.id, 'ContentItem has individual proficiency')
-    //         let proficiency = contentItem.proficiency;
-    //         proficiencyStats = addValToProficiencyStats(proficiencyStats,proficiency)
-    //         this.setProficiencyStats(proficiencyStats)
-    //     } else {
-    //         if (!me.children){ //this shouldn't ever happen tho
-    //             this.setProficiencyStats(proficiencyStats)
-    //             return
-    //         }
-    //         // Promise.all(Object.keys(me.children).map(Trees.get))
-    //         //     .then(childTrees => childTrees.forEach(tree => {
-    //         //
-    //         //     }))
-    //         Promise.all(Object.keys(me.children).map(Trees.get).map())
-    //         // console.log(me.id, 'ContentItem DOES NOT haveindividual proficiency')
-    //     // if (me.children){
-    //     //     console.log(me.id, 'ContentItem HAS children')
-    //     //     let addStatsFromChildrenPromises = Object.keys(me.children).map(childId => {
-    //     //         console.log(me.id, 'trees get getting called for child ', childId)
-    //     //         return Trees.get(childId).then(childTree => {
-    //     //             let recalculateChildProficiencyAggregationPromise = new Promise((resolve, reject) => {
-    //     //                 resolve("resolved")
-    //     //             })
-    //     //             // if (!childTree.proficiencyStats || !Object.keys(childTree.proficiencyStats).length){
-    //     //                 recalculateChildProficiencyAggregationPromise = childTree.recalculateProficiencyAggregation()
-    //     //                 console.log(me.id, 'recalculateProficiency getting called for child ', childId)
-    //     //             // }
-    //     //             return recalculateChildProficiencyAggregationPromise.then(() => {
-    //     //                 addObjToProficiencyStats(proficiencyStats, childTree.proficiencyStats)
-    //     //                 console.log(me.id, 'addObjToProficiencyStats getting called for child ', childId, proficiencyStats, childTree.proficiencyStats)
-    //     //             })
-    //     //         })
-    //     //     })
-    //     //     return Promise.all(addStatsFromChildrenPromises).then(() => {
-    //     //         me.setProficiencyStats(proficiencyStats)
-    //     //         me.set('proficiencyStats', proficiencyStats)
-    //     //         return Trees.get(me.parentId).then(parent => {
-    //     //             return parent.recalculateProficiencyAggregation()
-    //     //         })
-    //     //     })
-    //     // }
-    //     // else {
-    //     //     console.log(me.id, 'ContentItem DOES NOT haveindividual proficiency')
-    //     // }
-    //     }
-    //     // contentItem.proficiency
-    //
-    // }
-    //
 }
 //TODO: get typeScript so we can have a schema for treeObj
 //treeObj  example
@@ -330,14 +266,12 @@ export class Tree {
 //invoke like a constructor - new Tree(parentId, factId)
 
 function addObjToProficiencyStats(proficiencyStats, proficiencyObj){
-    console.log('args in addObjToProficiencyStats', proficiencyStats, proficiencyObj)
     Object.keys(proficiencyObj).forEach(key => {
         proficiencyStats[key] += proficiencyObj[key]
     })
     return proficiencyStats
 }
 function addValToProficiencyStats(proficiencyStats, proficiency){
-    console.log('addVal to proficiencyStats called', proficiencyStats,proficiency)
     if (proficiency <= PROFICIENCIES.UNKNOWN){
         proficiencyStats.UNKNOWN++
     }
@@ -353,6 +287,5 @@ function addValToProficiencyStats(proficiencyStats, proficiency){
     else if (proficiency <= PROFICIENCIES.FOUR){
         proficiencyStats.FOUR++
     }
-    console.log('addVal to proficiencyStats finished', proficiencyStats,proficiency)
     return proficiencyStats
 }
diff --git a/app/objects/trees.js b/app/objects/trees.js
index 6bef87f..3189518 100644
--- a/app/objects/trees.js
+++ b/app/objects/trees.js
@@ -15,7 +15,6 @@ export class Trees {
            throw "Trees.get(treeId) error!. treeId empty"
         }
         return new Promise( function getTreePromise (resolve, reject) {
-
             //trees serves as local cash for trees downloaded from db //TODO: this cache should become obselete when we switch to Couchdb+pouchdb
             if (trees[treeId]){
                 resolve(trees[treeId])
@@ -50,3 +49,4 @@ export class Trees {
         newParent.addChild(childId)
     }
 }
+window.Trees = Trees
diff --git a/index.html b/index.html
index 042c2ad..8b5cc34 100644
--- a/index.html
+++ b/index.html
@@ -110,28 +110,30 @@
 }(document, 'script', 'facebook-jssdk'));</script>
 
 <script>
-    var w = window,
-        d = document,
-        e = d.documentElement,
-        g = d.getElementsByTagName('body')[0],
-        x = w.innerWidth || e.clientWidth || g.clientWidth,
-        y = w.innerHeight|| e.clientHeight|| g.clientHeight;
-
-    var footerSize = 40;//px
-    var bodyHeight = y - footerSize
-
-    //^^TODO: do via CSS
-    document.write('' +
-        '<div class="page">' +
+    (function(){
+        var w = window,
+            d = document,
+            e = d.documentElement,
+            b = d.getElementsByTagName('body')[0],
+            x = w.innerWidth || e.clientWidth || b.clientWidth,
+            y = w.innerHeight|| e.clientHeight|| b.clientHeight;
+
+        var footerSize = 40;//px
+        var bodyHeight = y - footerSize
+
+        //^^TODO: do via CSS
+        document.write('' +
+            '<div class="page">' +
             '<div id="branches-app" class="branches-app">' +
-                '<router-view style="height:' + bodyHeight + 'px;" v-if="routing"></router-view>' +
-                '<exercise-creator-container style="height:' + bodyHeight + 'px;" v-if="exerciseCreator"></exercise-creator-container>' +
-                '<tree-review-container style="height:' + bodyHeight + 'px;" v-if="treeReview"></tree-review-container>' +
-                '<!--<review-schedule></review-schedule>-->' +
-                '<branches-footer style="height:' + footerSize +'px;"></branches-footer>'+
+            '<router-view style="height:' + bodyHeight + 'px;" v-if="routing"></router-view>' +
+            '<exercise-creator-container style="height:' + bodyHeight + 'px;" v-if="exerciseCreator"></exercise-creator-container>' +
+            '<tree-review-container style="height:' + bodyHeight + 'px;" v-if="treeReview"></tree-review-container>' +
+            '<!--<review-schedule></review-schedule>-->' +
+            '<branches-footer style="height:' + footerSize +'px;"></branches-footer>'+
             '</div>' +
-        '</div>' +
-        '')
+            '</div>' +
+            '')
+    })()
 </script>
 <script>
   document.write("<script type='text/javascript' src='/dist/build.js?v=" + Date.now() + "'><\/script>");
diff --git a/other_imports/sigma/sigma.settings.js b/other_imports/sigma/sigma.settings.js
index 88e018f..e1a7283 100644
--- a/other_imports/sigma/sigma.settings.js
+++ b/other_imports/sigma/sigma.settings.js
@@ -14,7 +14,7 @@
      */
     // {boolean} Indicates if the data have to be cloned in methods to add
     //           nodes or edges.
-    clone: true,
+    clone: false,
     // {boolean} Indicates if nodes "id" values and edges "id", "source" and
     //           "target" values must be set as immutable.
     immutable: true,
