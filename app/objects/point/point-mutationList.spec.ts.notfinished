describe('point MutationList', () => {
    it('FIRST mutation type should be CREATION', () => {
        /* TODO: Remove test. This should be a test for the
         mutationList<PointMutations> type. . . Not for the Point type */
        expect(firstMutation.type).to.equal(PointMutationTypes.CREATION)
    } )
    it('first mutation type should be active', () => {
        expect(firstMutation.active).to.equal(true)
    } )
    it('first mutation should not be listed as reversible', () => {
        expect(firstMutation.reversible).to.equal(false)
    } )
    /*
    Again, per PLI (principle of least information) and LoD
    For classes using mutationList, I shouldn't know how
    the internals of the MutationList/Mutations of a Mutable class work
    I should just know I can call actions and uncall them,
    and the end result works as expected
    */
    it('SECOND mutation should show up in history', () => {
        expect(point.mutations().length).to.equal(2)
    })
    it('second mutation type should be SHIFT', () => {
        const secondMutation = point.mutations(SECOND_MUTATION_INDEX)
        expect(secondMutation.type).to.equal(PointMutationTypes.SHIFT)
    })
    it('second mutation type should be listed reversible', () => {
        const secondMutation = point.mutations(SECOND_MUTATION_INDEX)
        expect(secondMutation.reversible).to.equal(PointMutationTypes.SHIFT)
    })
})
