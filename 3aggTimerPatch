diff --git a/app/components/tree/tree.html b/app/components/tree/tree.html
index a9604f1..a843aab 100644
--- a/app/components/tree/tree.html
+++ b/app/components/tree/tree.html
@@ -28,12 +28,13 @@
         {{tree.proficiencyStats.TWO}} --
         {{tree.proficiencyStats.THREE}} --
         {{tree.proficiencyStats.FOUR}} --
+        TIMER: {{tree.aggregationTimer}}
         <!--<button v-on:click="recalculateProficiencyAggregation">Recalculate Proficiency Aggregation</button>-->
-        <div class="tree-current-fact" v-show="!editing">
+        <div class="tree-current-heading" v-show="!editing">
             <input type="text" class="tree-current-fact-id" :value="content.id" hidden>
             <div class="tree-current-heading">{{content.title}}</div>
         </div>
-        <div class="tree-new-fact" v-show="editing">
+        <div class="tree-new-heading" v-show="editing">
             <input class="tree-id" v-model="content.id" hidden>
             <textarea class="tree-new-heading" v-model="content.title"></textarea>
             <div>
@@ -54,16 +55,10 @@
             </div>
         </div>
     </div>
-    <div class="tree-proficiency" v-show="!addingChild">
+    <div class="tree-proficiency" v-show="!addingChild && typeIsFact">
         <div class="divider-horizontal"></div>
         <div class="tree-proficiency-message">How well did you know this?</div>
         <proficiency-selector v-on:input="syncProficiency" v-model="content.proficiency"></proficiency-selector>
-        <!--<div class="tree-proficiency">-->
-            <!--<button class="tree-proficiency-one" v-on:click="setProficiencyToOne">Not at all</button>-->
-            <!--<button class="tree-proficiency-two" v-on:click="setProficiencyToTwo">A lil'</button>-->
-            <!--<button class="tree-proficiency-three" v-on:click="setProficiencyToThree">Mostly</button>-->
-            <!--<button class="tree-proficiency-four" v-on:click="setProficiencyToFour">All the way baby</button>-->
-        <!--</div>-->
     </div>
     <div class="tree-footer" v-show="!addingChild">
         <div class="divider-horizontal"></div>
@@ -78,7 +73,7 @@
             <!--<div class="tree-proficiency-value" title="proficiency"> {{content.proficiency}}% </div>-->
             <i class="tree-delete-button fa fa-trash-o" aria-hidden="true" v-if="user.isAdmin()" v-on:click="remove" ></i>
         </div>
-        <div class="tree-proficiency-timeTilReview" v-if="content.inStudyQueue">Next Review Time: {{content.nextReviewTime | timeFromNow}}</div>
+        <div class="tree-proficiency-timeTilReview" v-if="content.inStudyQueue && !typeIsHeading">Next Review Time: {{content.nextReviewTime | timeFromNow}}</div>
     </div>
     <div v-show="addingChild" class="tree-add-child-button" v-on:click="toggleAddChild">
         <i :class="{'tree-edit-button': true, 'fa': true, 'fa-plus-square-o': !addingChild, 'fa-minus-square-o': addingChild}" aria-hidden="true"></i>
diff --git a/app/objects/contentItem.js b/app/objects/contentItem.js
index bea47ad..570f362 100644
--- a/app/objects/contentItem.js
+++ b/app/objects/contentItem.js
@@ -150,12 +150,14 @@ export default class ContentItem {
     }
         //TODO : make timer for heading be the sum of the time of all the child facts
     startTimer() {
-        var self = this
+        var me = this
+
 
         if (!this.timerId) { //to prevent from two or more timers being created simultaneously on the content item
             this.timerId = setInterval(function () {
-                self.timer  = self.timer || 0
-                self.timer++ // = fact.timer || 0
+                me.timer  = me.timer || 0
+                me.timer++ // = fact.timer || 0
+                me.calculateAggregationTimerForTreeChain()//propagate the time increase all the way up
             }, 1000)
         }
 
@@ -207,6 +209,15 @@ export default class ContentItem {
         })
         return Promise.all(calculationPromises)
     }
+    calculateAggregationTimerForTreeChain(){
+        const treePromises = this.trees ? Object.keys(this.trees).map(Trees.get)
+            : [] // again with the way we've designed this only one contentItem should exist per tree and vice versa . . .but i'm keeping this for loop here for now
+        const calculationPromises = treePromises.map(async treePromise => {
+            const tree = await treePromise
+            return tree.calculateAggregationTimer()
+        })
+        return Promise.all(calculationPromises)
+    }
     saveProficiency(){
         !this.inStudyQueue && this.addToStudyQueue()
 
diff --git a/app/objects/tree.js b/app/objects/tree.js
index 5a86f22..5d373de 100644
--- a/app/objects/tree.js
+++ b/app/objects/tree.js
@@ -6,7 +6,6 @@ const trees = {};
 import {Trees} from './trees.js'
 import ContentItems from './contentItems'
 import {syncGraphWithNode}  from '../components/knawledgeMap/knawledgeMap'
-import timers from './timers'
 import {PROFICIENCIES} from "../components/proficiencyEnum";
 
 function loadObject(treeObj, self){
@@ -35,6 +34,7 @@ export class Tree {
             treeObj = arguments[0]
             loadObject(treeObj, this)
             this.proficiencyStats = this.userProficiencyStatsMap && this.userProficiencyStatsMap[user.getId()] || unknownProficiencyStats
+            this.aggregationTimer = this.userAggregationTimerMap && this.userAggregationTimerMap[user.getId()] || 0
             return
         }
 
@@ -42,8 +42,12 @@ export class Tree {
         this.contentType = contentType
         this.parentId = parentId;
         this.children = {};
+
         this.userProficiencyStatsMap = {}
+        this.userAggregationTimerMap = {}
         this.proficiencyStats = this.userProficiencyStatsMap && this.userProficiencyStatsMap[user.getId()] || unknownProficiencyStats
+        this.aggregationTimer = this.userAggregationTimerMap && this.userAggregationTimerMap[user.getId()] || 0
+
 
         this.x = x
         this.y = y
@@ -152,6 +156,17 @@ export class Tree {
         firebase.database().ref('trees/' + this.id).update(updates)
         console.log(this.id, ': set Proficiency Stats called')
     }
+    setAggregationTimer(timer){
+        this.timer = timer
+        this.userAggregationTimerMap = this.userAggregationTimerMap || {}
+        this.userAggregationTimerMap[user.getId()] = this.timer
+
+        const updates = {
+            userAggregationTimerMap: this.userAggregationTimerMap
+        }
+        console.log(this.id, ': set aggregation timer called', updates, JSON.stringify(updates))
+        firebase.database().ref('trees/' + this.id).update(updates)
+    }
 
     /**
      * Change the content of a given node ("Tree")
@@ -249,6 +264,43 @@ export class Tree {
         const parent = await Trees.get(this.parentId)
         return parent.recalculateProficiencyAggregation()
     }
+    async calculateAggregationTimerForLeaf(){
+        let contentItem = await ContentItems.get(this.contentId)
+        console.log("calculateAggregationTimerForLeaf timer is", contentItem.timer)
+        return contentItem.timer
+    }
+    async calculateAggregationTimerForNotLeaf(){
+        let timer = 0
+        if (!this.children || !Object.keys(this.children).length) return timer
+        const children = await Promise.all(
+            Object.keys(this.children)
+                .map(Trees.get)
+                .map(async childPromise => await childPromise)
+        )
+
+        children.forEach(child => {
+            timer += +child.aggregationTimer
+            console.log('child timer is', child.aggregationTimer, 'timer is now', timer)
+        })
+        console.log("calculateAggregationTimerForNotLeaf timer is", timer)
+        return timer
+    }
+    async calculateAggregationTimer(){
+        let timer;
+        const isLeaf = await this.isLeaf()
+        if (isLeaf){
+            timer = await this.calculateAggregationTimerForLeaf()
+        } else {
+            timer = await this.calculateAggregationTimerForNotLeaf()
+        }
+        console.log("timer about to be passed into setAggregationTimer is", timer)
+        this.setAggregationTimer(timer)
+
+        if (!this.parentId) return
+        const parent = await Trees.get(this.parentId)
+        return parent.calculateAggregationTimer()
+    }
+
 }
 //TODO: get typeScript so we can have a schema for treeObj
 //treeObj  example
